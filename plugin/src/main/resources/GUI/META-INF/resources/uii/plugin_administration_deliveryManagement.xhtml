<ui:composition
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:composite="http://xmlns.jcp.org/jsf/composite"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:f="http://xmlns.jcp.org/jsf/core"
    xmlns:x="http://myfaces.apache.org/tomahawk"
    xmlns:intranda="http://xmlns.jcp.org/jsf/composite/compositesPG"
    xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
    xmlns:jsf="http://xmlns.jcp.org/jsf"
    xmlns:p="http://primefaces.org/ui">

    <composite:interface>
    </composite:interface>

    <composite:implementation>

        <!-- Custom plugin styles -->
        <link
            type="text/css"
            rel="stylesheet"
            href="#{HelperForm.applicationWebsiteUrl}uii/css/plugin_administration_deliveryManagement.css" />

        <script src="template/js/plugins/tinymce/tinymce.min.js"></script>

        <main>
            <h:panelGroup>
                <div class="row deliveryManagement #{AdministrationForm.administrationPlugin.editionMode=='edit' ? 'editMode' : ''}">
                    <h:panelGroup
                        layout="block"
                        styleClass="#{AdministrationForm.administrationPlugin.editionMode=='edit' ? 'col-sm-6' : 'col-sm-12'}">
                        <intranda:box
                            boxType="neutral"
                            boxPadding="#{AdministrationForm.administrationPlugin.editionMode=='edit' ? 'false' : 'true'}"
                            boxTitle="false"
                            boxForm="true"
                            id="administrationPlugin">

                            <intranda:boxTitle
                                icon="fa-plug"
                                id="box-title"
                                title="#{msgs[AdministrationForm.administrationPlugin.title]}#{AdministrationForm.administrationPlugin.displayMode != null ? ': '.concat(msgs[AdministrationForm.administrationPlugin.displayMode]) : ''}">
                                <ul class="tabs">
                                    <ui:repeat
                                        var="mode"
                                        value="#{AdministrationForm.administrationPlugin.modes}">
                                        <li class="tab #{mode eq AdministrationForm.administrationPlugin.displayMode ?'active':''}">
                                            <h:commandLink
                                                id="details"
                                                action="#{NavigationForm.Reload}"
                                                value="#{msgs[mode]}"
                                                disabled="#{AdministrationForm.administrationPlugin.editionMode == 'edit'}">
                                                <f:setPropertyActionListener
                                                    target="#{AdministrationForm.administrationPlugin.displayMode}"
                                                    value="#{mode}" />
                                                <f:setPropertyActionListener
                                                    value=""
                                                    target="#{AdministrationForm.administrationPlugin.editionMode}" />
                                                <f:ajax render="@all" />
                                            </h:commandLink>
                                        </li>
                                    </ui:repeat>
                                </ul>
                            </intranda:boxTitle>

                            <div class="box__body">
                                <!-- TODO: try to access plugin from non-authorized acc -->
                                <h:panelGroup rendered="#{!LoginForm.hasRole('Plugin_administration_deliveryManagement')}">
                                    <h:outputText
                                        styleClass="alert alert-danger alert-dismissable margin-bottom-10 margin-top-10"
                                        value="#{msgs.plugin_administration_missingPermission} Plugin_administration_deliveryManagement" />
                                </h:panelGroup>

                                <h:panelGroup
                                    layout="block"
                                    id="actionform"
                                    rendered="#{LoginForm.hasRole('Plugin_administration_deliveryManagement')}">
                                    <h:panelGroup
                                        id="plugin-main-content"
                                        layout="block">
                                        <ui:fragment rendered="#{AdministrationForm.administrationPlugin.displayMode == 'plugin_administration_deliveryManagement_displayMode_user'}">
                                            <ui:include src="include_users.xhtml" />
                                        </ui:fragment>

                                        <ui:fragment rendered="#{AdministrationForm.administrationPlugin.displayMode == 'plugin_administration_deliveryManagement_displayMode_privacyPolicy'}">
                                            <ui:include src="include_privacyPolicy.xhtml" />
                                        </ui:fragment>

                                        <ui:fragment rendered="#{AdministrationForm.administrationPlugin.displayMode == 'plugin_administration_deliveryManagement_displayMode_zdbTitleData'}">
                                            <ui:include src="include_zdbTitleData.xhtml" />
                                        </ui:fragment>
                                    </h:panelGroup>
                                </h:panelGroup>
                            </div>
                        </intranda:box>
                    </h:panelGroup>
                    <h:panelGroup
                        layout="block"
                        styleClass="#{NavigationForm.uiStatus['journalBig']?'col-12 col-md-12':'col-6 col-md-6'} journal"
                        rendered="#{AdministrationForm.administrationPlugin.editionMode=='edit'}">
                        <h:form
                            enctype="multipart/form-data">
                            <!-- Box for process log -->
                            <x:aliasBeansScope>
                                <x:aliasBean
                                    alias="#{showBigButton}"
                                    value="true" />
                                <x:aliasBean
                                    alias="#{showFolderSelection}"
                                    value="false" />
                                <x:aliasBean
                                    alias="#{bean}"
                                    value="#{AdministrationForm.administrationPlugin.institution}" />
                                <f:subview id="sublog">
                                    <ui:include src="/uii/includes/journal.xhtml" />
                                </f:subview>
                            </x:aliasBeansScope>
                        </h:form>
                        <!-- // Box for process log -->

                    </h:panelGroup>
                </div>
            </h:panelGroup>
        </main>
        <script type="text/javascript">
                                    //<![CDATA[

                                    jsf.ajax.addOnEvent( function( data ) {
                                        var ajaxstatus = data.status; // Can be "begin", "complete" and "success"
                                        var source = data.source;
                                        switch ( ajaxstatus ) {
                                            case "begin": // This is called right before ajax request is been sent.
                                                break;
                                            case "complete": // This is called right after ajax response is received.
                                                break;
                                            case "success": // This is called when ajax response is successfully processed.
                                                // find element,set focus

                                                break;
                                        }
                                    } );

                                    var simpleTinyMceConfig = {
                                        selector: '.textarea-html',
                                        setup: function( editor ) {
                                            editor.on( 'change', function() {
                                                tinymce.triggerSave();
                                            } );
                                        },
                                        valid_elements: 'p,strong,em,span[!style<text-decoration: underline;],sup,h1,h2,h3,h4,h5,h6,blockquote,div,pre,a',
                                        statusbar: true,
                                        theme: 'silver',
                                        height: 600,
                                        plugins: [ 'print code preview fullscreen' ],
                                        menu: {
                                            edit: {
                                                title: 'Edit',
                                                items: 'undo redo | cut copy paste pastetext | selectall'
                                            },
                                            format: {
                                                title: 'Format',
                                                items: 'bold italic underline strikethrough | formats | removeformat'
                                            },
                                            tools: {
                                                title: 'Tools',
                                                items: 'spellchecker code'
                                            }
                                        },
                                        menubar: 'edit format tools',
                                        toolbar: false,
                                        toolbar: 'undo redo | bold italic underline | code ',
                                        content_css: './css/plugin_administration_deliveryManagement_tinymce.css',
                                        init_instance_callback: function( editor ) {
                                            var readOnlyAttr = $( "#" + editor.id.replace( ":", "\\:" ) ).attr( "readonly" );
                                            if ( readOnlyAttr === "readonly" ) {
                                                editor.setMode( "readonly" );
                                            }
                                        },
                                        setup: function( editor ) {
                                            editor.on( "blur", function( event, a, b ) {
                                                editor.save();
                                                $( "#" + editor.id.replace( ":", "\\:" ) ).trigger( "change" );
                                            } );
                                        }

                                    };

                                    function initTinyMce() {
                                        console.log( "Init tinyMce" );
                                        tinymce.init( simpleTinyMceConfig );
                                    };

                                    $( window ).on( "load", function() {
                                        renderInputFields()
                                    } );
                                    $( document ).ready( function() {
                                        renderInputFields()
                                    } );

                                    jsf.ajax.addOnEvent( function( data ) {
                                        var ajaxstatus = data.status; // Can be "begin", "complete" and "success"
                                        switch ( ajaxstatus ) {
                                            case "success": // This is called when ajax response is successfully processed.
                                                renderInputFields()
                                                break;
                                        }
                                    } );

                                    function renderInputFields( ajaxData ) {
                                        if ( typeof tinyMCE !== 'undefined' ) {
                                            if ( ajaxData === undefined || ajaxData.status == "begin" ) {
                                                for ( edId in tinyMCE.editors ) {
                                                    try {
                                                        tinyMCE.editors[ edId ].remove();
                                                        console.log( "Removed editor " + edId );
                                                    }
                                                    catch ( error ) {
                                                        console.log( "Error occured during removing editors; ", error );
                                                    }
                                                }
                                            }
                                            if ( ajaxData === undefined || ajaxData.status == "success" ) {
                                                initTinyMce( ajaxData );
                                            }
                                        }
                                    }
                                    //]]>
                                </script>
    </composite:implementation>
</ui:composition>
