<ui:composition
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:composite="http://xmlns.jcp.org/jsf/composite"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:f="http://xmlns.jcp.org/jsf/core"
    xmlns:x="http://myfaces.apache.org/tomahawk"
    xmlns:intranda="http://xmlns.jcp.org/jsf/composite/composites"
    xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
    xmlns:jsf="http://xmlns.jcp.org/jsf"
    xmlns:p="http://primefaces.org/ui">

    <composite:interface>
    </composite:interface>

    <composite:implementation>

		<!-- Custom plugin styles -->
		<h:outputStylesheet library="css" name="styles.css"/>

        <script src="template/js/plugins/tinymce/tinymce.min.js"></script>


		<main>
        <h:panelGroup>
            <div class="row deliveryManagement">
                <div class="col-sm-12">
                    <div class="box box-color box-bordered lightgrey">
                        <div
                            class="box-title"
                            jsf:id="box-title">
                            <h2>
                                <i class="fa fa-plug"></i>
                                <h:outputText value="#{msgs[AdministrationForm.administrationPlugin.title]}" />
                                <h:outputText
                                    value=": #{msgs[AdministrationForm.administrationPlugin.displayMode]}"
                                    rendered="#{AdministrationForm.administrationPlugin.displayMode != null}" />
                            </h2>

                            <ul class="tabs">
							<ui:repeat
								var="mode"
								value="#{AdministrationForm.administrationPlugin.modes}"
								varStatus="status">

                                <li class="#{mode eq AdministrationForm.administrationPlugin.displayMode ?'active':''}">
                                    <h:commandLink id="details" action="#{NavigationForm.Reload}" value="#{msgs[mode]}">
                                        <f:setPropertyActionListener target="#{AdministrationForm.administrationPlugin.displayMode}" value="#{mode}" />
                                        <f:setPropertyActionListener
											value=""
											target="#{AdministrationForm.administrationPlugin.editionMode}" />
										<f:ajax render="@form :box-title :plugin-main-content" />
                                    </h:commandLink>
                                </li>

							</ui:repeat>
                            </ul>
                        </div>
                        <div class="box-content nopadding">
                                                

                            <h:panelGroup rendered="#{!LoginForm.hasRole('Plugin_administration_deliveryManagement')}">
                                <h:outputText
                                    styleClass="alert alert-danger alert-dismissable margin-bottom-10 margin-top-10"
                                    value="#{msgs.plugin_administration_missingPermission} Plugin_administration_deliveryManagement" />
                            </h:panelGroup>

                            <h:panelGroup
                                id="actionform"
                                rendered="#{LoginForm.hasRole('Plugin_administration_deliveryManagement')}"
                                styleClass="col-sm-12">
                                <div class="row">

                                        <h:panelGroup
                                            id="plugin-main-content"
                                            layout="block"
                                            styleClass="col-md-12">

											
                                            <ui:fragment rendered="#{AdministrationForm.administrationPlugin.displayMode == 'displayMode_institution'}">
                                                <ui:include src="include_institution.xhtml" />
                                            </ui:fragment>

                                            <ui:fragment rendered="#{AdministrationForm.administrationPlugin.displayMode == 'displayMode_user'}">
                                                <ui:include src="include_users.xhtml" />
                                            </ui:fragment>

                                            <ui:fragment rendered="#{AdministrationForm.administrationPlugin.displayMode == 'displayMode_privacyPolicy'}">
                                                <ui:include src="include_privacyPolicy.xhtml" />
                                            </ui:fragment>
                                      
                                        </h:panelGroup>
                                </div>
                            </h:panelGroup>

                        </div>
                    </div>
                </div>
            </div>
        </h:panelGroup>
       	</main>
<script type="text/javascript">
                                    //<![CDATA[
                                    var simpleTinyMceConfig = {
                                        selector: '.textarea-html',
                                        setup: function( editor ) {
                                            editor.on( 'change', function() {
                                                tinymce.triggerSave();
                                            } );
                                        },
                                        valid_elements: 'p,strong,em,span[!style<text-decoration: underline;],sup,',
                                        statusbar: true,
                                        theme: 'silver',
                                        height: 250,
                                        plugins: [ 'print code preview fullscreen' ],
                                        menu: {},
                                        toolbar: false,
                                        toolbar: 'undo redo | bold italic underline | superscript | code ',
                                        content_css: 'css/content.css',
                                        init_instance_callback: function( editor ) {
                                            var readOnlyAttr = $( "#" + editor.id.replace( ":", "\\:" ) ).attr( "readonly" );
                                            if ( readOnlyAttr === "readonly" ) {
                                                editor.setMode( "readonly" );
                                            }
                                        },
                                        setup: function( editor ) {
                                            editor.on( "blur", function( event, a, b ) {
                                                editor.save();
                                                $( "#" + editor.id.replace( ":", "\\:" ) ).trigger( "change" );
                                            } );
                                        }

                                    };

                                    function initTinyMce() {
                                        console.log( "Init tinyMce" );
                                        tinymce.init( simpleTinyMceConfig );
                                    };

                                    $( window ).on( "load", function() {
                                        renderInputFields()
                                    } );
                                    $( document ).ready(function() {
                                        renderInputFields()
                                    } );

                                    jsf.ajax.addOnEvent( function( data ) {
                                        var ajaxstatus = data.status; // Can be "begin", "complete" and "success"
                                        switch ( ajaxstatus ) {
                                            case "success": // This is called when ajax response is successfully processed.
                                                renderInputFields()
                                                break;
                                        }
                                    } );

                                    function renderInputFields( ajaxData ) {
                                        if ( typeof tinyMCE !== 'undefined' ) {
                                            if ( ajaxData === undefined || ajaxData.status == "begin" ) {
                                                for ( edId in tinyMCE.editors ) {
                                                    try {
                                                        tinyMCE.editors[ edId ].remove();
                                                        console.log( "Removed editor " + edId );
                                                    }
                                                    catch ( error ) {
                                                        console.log( "Error occured during removing editors; ", error );
                                                    }
                                                }
                                            }
                                            if ( ajaxData === undefined || ajaxData.status == "success" ) {
                                                initTinyMce( ajaxData );
                                            }
                                        }
                                    }
                                    //]]>
                                </script>
    </composite:implementation>
</ui:composition>
